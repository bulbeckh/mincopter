
#pragma once

#include "mcinstance.h"
#include "mcstate.h"

class MC_Controller {

	public:
		/* @brief Top-level abstraction for a MinCopter controller
		 * @param mcstate
		 * @param mcinstance
		 */
		MC_Controller() :
			max_climb_rate(10000),
			min_climb_rate(10000),
			/* NOTE Hardcoded here but should probably pull from config file */
			angle_rate_max(18000)
		{
		}

		// TODO Add destructor

	public:

		/* @brief Runs controller taking in the state and instance objects and updating control output
		 * @param
		 */
		virtual void run() = 0;

		// Controller State Variables
		// TODO Check that the units are correct here
		
		/* These state variables will likely instead be buffers holding the next N states of the reference
		 * trajectories generated by the planner.
		 */

		/* @brief Position vector (inertial frame) (m)
		 */
		int16_t control_x;
		int16_t control_y;
		int16_t control_z;

		/* @brief Desired roll/pitch/yaw values for determination by planner and usage by controller (inertial frame) (rad)
		 */
		int16_t control_roll;
		int16_t control_pitch;
		int32_t control_yaw;

		/* @brief Velocity vector (inertial frame) (m/s)
		 */
		int16_t control_dx;
		int16_t control_dy;
		int16_t control_dz;

		/* @brief Rotation rates (body frame) (rad/s)
		 */
		int16_t control_droll;
		int16_t control_dpitch;
		int16_t control_dyaw;

		// Control Limits

		// TODO split into separate max and min roll/pitch rates + add yaw_rate + rename these in the other files
		// TODO is int32_t really required here or will int16_t suffice

		/* @brief Maximum rotation rate in roll/pitch axis */
		int32_t angle_rate_max;

		/* @brief Parameters to control vertical ascent/descent speed. Set by planner */
		int16_t max_climb_rate;
		int16_t min_climb_rate;

		/* @brief The current climb rate. Used during call to get_throttle_rate (high-level) */
		// TODO Where is climb rate actually set??
		int16_t climb_rate;

		// NOTE TODO Duplicate with state vector
		/* @brief The desired altitude in cm. Setup by planner */
		float controller_desired_alt;

};


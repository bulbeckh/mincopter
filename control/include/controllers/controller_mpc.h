
#pragma once

#include <stdint.h>

#include "control.h"

#ifdef TARGET_ARCH_LINUX
	// HASH include "osqp.h"
#endif

class MPC_Controller : public MC_Controller
{
	public:

		MPC_Controller(
		) : MC_Controller()

	{
	}
	
	/* **MPC Controller Implementation**
	 *
	 * Takes a reference trajectory generated by the planner and generates an optimal control input, U,
	 * under controller constraints.
	 * 
	 * We use a 12-state vector for our states:
	 * - 0:3 Position (metres, inertial frame) (x,y,z)
	 * - 3:6 Attitude (radians, rotation from inertial to body) (roll, pitch, yaw)
	 * - 6:9 Velocity (m/s, inertial frame) (1st deriv. of position)
	 * - 9:12 Roll Rates (rad/s, body frame) (1st deriv. of attitude)
	 *
	 * Our control output U is a 4-state vector:
	 * - 0 Total Thrust (N)
	 * - 1 Roll Torque (N, about x-axis)
	 * - 2 Pitch Torque (N, about y-axis)
	 * - 3 Yaw Torque (N, about z-axis)
	 *
	 * In simulation, we run the planner at 100Hz and take the next control update.
	 *
	 * **Libraries**
	 * We use OSQP to solve the control problem at each iteration.
	 *
	 */

	public:

		void run() override;

	private:

		// MPC Vars

	private:


};


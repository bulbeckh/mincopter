
#include "controller_mpc.h"
#include "osqp_api_types.h"

#ifdef TARGET_ARCH_LINUX
	#include <iostream>

	#include "gz_interface.h"
	extern GZ_Interface gz_interface;

	#include "simulation_logger.h"
	extern SimulationLogger simlog;
#endif

#include "mcstate.h"
extern MCState mcstate;

#include "mcinstance.h"
extern MCInstance mincopter;

// NOTE The solver is defined in the generated **workspace.c** file
extern "C" {
	extern OSQPSolver solver;
}

// NOTE Move this constructor into it's own translation unit
MPC_Controller::MPC_Controller()
	: MC_Controller(),
  	linearised_A{
	1.0f, // (0,0)
	0.0f, // (0,1)
	0.0f, // (0,2)
	0.0f, // (0,3)
	0.049f, // (0,4)
	0.0f, // (0,5)
	0.09999999999999999f, // (0,6)
	0.0f, // (0,7)
	0.0f, // (0,8)
	0.0f, // (0,9)
	0.0016333333333333334f, // (0,10)
	0.0f, // (0,11)
	0.0f, // (1,0)
	1.0f, // (1,1)
	0.0f, // (1,2)
	0.049f, // (1,3)
	0.0f, // (1,4)
	0.0f, // (1,5)
	0.0f, // (1,6)
	0.09999999999999999f, // (1,7)
	0.0f, // (1,8)
	0.0016333333333333334f, // (1,9)
	0.0f, // (1,10)
	0.0f, // (1,11)
	0.0f, // (2,0)
	0.0f, // (2,1)
	1.0f, // (2,2)
	0.0f, // (2,3)
	0.0f, // (2,4)
	0.0f, // (2,5)
	0.0f, // (2,6)
	0.0f, // (2,7)
	0.09999999999999999f, // (2,8)
	0.0f, // (2,9)
	0.0f, // (2,10)
	0.0f, // (2,11)
	0.0f, // (3,0)
	0.0f, // (3,1)
	0.0f, // (3,2)
	1.0f, // (3,3)
	0.0f, // (3,4)
	0.0f, // (3,5)
	0.0f, // (3,6)
	0.0f, // (3,7)
	0.0f, // (3,8)
	0.09999999999999999f, // (3,9)
	0.0f, // (3,10)
	0.0f, // (3,11)
	0.0f, // (4,0)
	0.0f, // (4,1)
	0.0f, // (4,2)
	0.0f, // (4,3)
	1.0f, // (4,4)
	0.0f, // (4,5)
	0.0f, // (4,6)
	0.0f, // (4,7)
	0.0f, // (4,8)
	0.0f, // (4,9)
	0.09999999999999999f, // (4,10)
	0.0f, // (4,11)
	0.0f, // (5,0)
	0.0f, // (5,1)
	0.0f, // (5,2)
	0.0f, // (5,3)
	0.0f, // (5,4)
	1.0f, // (5,5)
	0.0f, // (5,6)
	0.0f, // (5,7)
	0.0f, // (5,8)
	0.0f, // (5,9)
	0.0f, // (5,10)
	0.09999999999999999f, // (5,11)
	0.0f, // (6,0)
	0.0f, // (6,1)
	0.0f, // (6,2)
	0.0f, // (6,3)
	0.9800000000000001f, // (6,4)
	0.0f, // (6,5)
	1.0f, // (6,6)
	0.0f, // (6,7)
	0.0f, // (6,8)
	0.0f, // (6,9)
	0.049f, // (6,10)
	0.0f, // (6,11)
	0.0f, // (7,0)
	0.0f, // (7,1)
	0.0f, // (7,2)
	0.9800000000000001f, // (7,3)
	0.0f, // (7,4)
	0.0f, // (7,5)
	0.0f, // (7,6)
	1.0f, // (7,7)
	0.0f, // (7,8)
	0.049f, // (7,9)
	0.0f, // (7,10)
	0.0f, // (7,11)
	0.0f, // (8,0)
	0.0f, // (8,1)
	0.0f, // (8,2)
	0.0f, // (8,3)
	0.0f, // (8,4)
	0.0f, // (8,5)
	0.0f, // (8,6)
	0.0f, // (8,7)
	1.0f, // (8,8)
	0.0f, // (8,9)
	0.0f, // (8,10)
	0.0f, // (8,11)
	0.0f, // (9,0)
	0.0f, // (9,1)
	0.0f, // (9,2)
	0.0f, // (9,3)
	0.0f, // (9,4)
	0.0f, // (9,5)
	0.0f, // (9,6)
	0.0f, // (9,7)
	0.0f, // (9,8)
	1.0f, // (9,9)
	0.0f, // (9,10)
	0.0f, // (9,11)
	0.0f, // (10,0)
	0.0f, // (10,1)
	0.0f, // (10,2)
	0.0f, // (10,3)
	0.0f, // (10,4)
	0.0f, // (10,5)
	0.0f, // (10,6)
	0.0f, // (10,7)
	0.0f, // (10,8)
	0.0f, // (10,9)
	1.0f, // (10,10)
	0.0f, // (10,11)
	0.0f, // (11,0)
	0.0f, // (11,1)
	0.0f, // (11,2)
	0.0f, // (11,3)
	0.0f, // (11,4)
	0.0f, // (11,5)
	0.0f, // (11,6)
	0.0f, // (11,7)
	0.0f, // (11,8)
	0.0f, // (11,9)
	0.0f, // (11,10)
	1.0f, // (11,11)
  },
  linearised_B{
	0.0f, //B(0,0)
	0.0f, //B(0,1)
	0.0003712121212121212f, //B(0,2)
	0.0f, //B(0,3)
	0.0f, //B(1,0)
	0.0003712121212121212f, //B(1,1)
	0.0f, //B(1,2)
	0.0f, //B(1,3)
	0.004999999999999999f, //B(2,0)
	0.0f, //B(2,1)
	0.0f, //B(2,2)
	0.0f, //B(2,3)
	0.0f, //B(3,0)
	0.045454545454545456f, //B(3,1)
	0.0f, //B(3,2)
	0.0f, //B(3,3)
	0.0f, //B(4,0)
	0.0f, //B(4,1)
	0.045454545454545456f, //B(4,2)
	0.0f, //B(4,3)
	0.0f, //B(5,0)
	0.0f, //B(5,1)
	0.0f, //B(5,2)
	0.12499999999999999f, //B(5,3)
	0.0f, //B(6,0)
	0.0f, //B(6,1)
	0.01484848484848485f, //B(6,2)
	0.0f, //B(6,3)
	0.0f, //B(7,0)
	0.01484848484848485f, //B(7,1)
	0.0f, //B(7,2)
	0.0f, //B(7,3)
	0.09999999999999999f, //B(8,0)
	0.0f, //B(8,1)
	0.0f, //B(8,2)
	0.0f, //B(8,3)
	0.0f, //B(9,0)
	0.9090909090909092f, //B(9,1)
	0.0f, //B(9,2)
	0.0f, //B(9,3)
	0.0f, //B(10,0)
	0.0f, //B(10,1)
	0.9090909090909092f, //B(10,2)
	0.0f, //B(10,3)
	0.0f, //B(11,0)
	0.0f, //B(11,1)
	0.0f, //B(11,2)
	2.5f, //B(11,3)
  },
  lower_constraint{
	-10.0, // (0,0)
	-1.475, // (1,0)
	-1.475, // (2,0)
	-0.0196, // (3,0)
	-10.0, // (4,0)
	-1.475, // (5,0)
	-1.475, // (6,0)
	-0.0196, // (7,0)
	-10.0, // (8,0)
	-1.475, // (9,0)
	-1.475, // (10,0)
	-0.0196, // (11,0)
	-10.0, // (12,0)
	-1.475, // (13,0)
	-1.475, // (14,0)
	-0.0196, // (15,0)
	-10.0, // (16,0)
	-1.475, // (17,0)
	-1.475, // (18,0)
	-0.0196, // (19,0)
	-10.0, // (20,0)
	-1.475, // (21,0)
	-1.475, // (22,0)
	-0.0196, // (23,0)
	-10.0, // (24,0)
	-1.475, // (25,0)
	-1.475, // (26,0)
	-0.0196, // (27,0)
	-10.0, // (28,0)
	-1.475, // (29,0)
	-1.475, // (30,0)
	-0.0196, // (31,0)
	-10.0, // (32,0)
	-1.475, // (33,0)
	-1.475, // (34,0)
	-0.0196, // (35,0)
	-10.0, // (36,0)
	-1.475, // (37,0)
	-1.475, // (38,0)
	-0.0196, // (39,0)
	-1.5707963267948966, // (40,0)
	-1.5707963267948966, // (41,0)
	-1.5707963267948966, // (42,0)
	-1.5707963267948966, // (43,0)
	-1.5707963267948966, // (44,0)
	-1.5707963267948966, // (45,0)
	-1.5707963267948966, // (46,0)
	-1.5707963267948966, // (47,0)
	-1.5707963267948966, // (48,0)
	-1.5707963267948966, // (49,0)
	-1.5707963267948966, // (50,0)
	-1.5707963267948966, // (51,0)
	-1.5707963267948966, // (52,0)
	-1.5707963267948966, // (53,0)
	-1.5707963267948966, // (54,0)
	-1.5707963267948966, // (55,0)
	-1.5707963267948966, // (56,0)
	-1.5707963267948966, // (57,0)
	-1.5707963267948966, // (58,0)
	-1.5707963267948966, // (59,0)
	-2.0, // (60,0)
	-2.0, // (61,0)
	-2.0, // (62,0)
	-2.0, // (63,0)
	-2.0, // (64,0)
	-2.0, // (65,0)
	-2.0, // (66,0)
	-2.0, // (67,0)
	-2.0, // (68,0)
	-2.0, // (69,0)
	-2.0, // (70,0)
	-2.0, // (71,0)
	-2.0, // (72,0)
	-2.0, // (73,0)
	-2.0, // (74,0)
	-2.0, // (75,0)
	-2.0, // (76,0)
	-2.0, // (77,0)
	-2.0, // (78,0)
	-2.0, // (79,0)
	-2.0, // (80,0)
	-2.0, // (81,0)
	-2.0, // (82,0)
	-2.0, // (83,0)
	-2.0, // (84,0)
	-2.0, // (85,0)
	-2.0, // (86,0)
	-2.0, // (87,0)
	-2.0, // (88,0)
	-2.0, // (89,0)
	-9.42477796076938, // (90,0)
	-9.42477796076938, // (91,0)
	-9.42477796076938, // (92,0)
	-9.42477796076938, // (93,0)
	-9.42477796076938, // (94,0)
	-9.42477796076938, // (95,0)
	-9.42477796076938, // (96,0)
	-9.42477796076938, // (97,0)
	-9.42477796076938, // (98,0)
	-9.42477796076938, // (99,0)
	-9.42477796076938, // (100,0)
	-9.42477796076938, // (101,0)
	-9.42477796076938, // (102,0)
	-9.42477796076938, // (103,0)
	-9.42477796076938, // (104,0)
	-9.42477796076938, // (105,0)
	-9.42477796076938, // (106,0)
	-9.42477796076938, // (107,0)
	-9.42477796076938, // (108,0)
	-9.42477796076938, // (109,0)
	-9.42477796076938, // (110,0)
	-9.42477796076938, // (111,0)
	-9.42477796076938, // (112,0)
	-9.42477796076938, // (113,0)
	-9.42477796076938, // (114,0)
	-9.42477796076938, // (115,0)
	-9.42477796076938, // (116,0)
	-9.42477796076938, // (117,0)
	-9.42477796076938, // (118,0)
	-9.42477796076938, // (119,0)
	0.0, // (120,0)
	0.0, // (121,0)
	0.0, // (122,0)
	0.0, // (123,0)
	0.0, // (124,0)
	0.0, // (125,0)
	0.0, // (126,0)
	0.0, // (127,0)
	0.0, // (128,0)
	0.0, // (129,0)
	0.0, // (130,0)
	0.0, // (131,0)
	0.0, // (132,0)
	0.0, // (133,0)
	0.0, // (134,0)
	0.0, // (135,0)
	0.0, // (136,0)
	0.0, // (137,0)
	0.0, // (138,0)
	0.0, // (139,0)
	0.0, // (140,0)
	0.0, // (141,0)
	0.0, // (142,0)
	0.0, // (143,0)
	0.0, // (144,0)
	0.0, // (145,0)
	0.0, // (146,0)
	0.0, // (147,0)
	0.0, // (148,0)
	0.0, // (149,0)
	0.0, // (150,0)
	0.0, // (151,0)
	0.0, // (152,0)
	0.0, // (153,0)
	0.0, // (154,0)
	0.0, // (155,0)
	0.0, // (156,0)
	0.0, // (157,0)
	0.0, // (158,0)
	0.0, // (159,0)
	0.0, // (160,0)
	0.0, // (161,0)
	0.0, // (162,0)
	0.0, // (163,0)
	0.0, // (164,0)
	0.0, // (165,0)
	0.0, // (166,0)
	0.0, // (167,0)
	0.0, // (168,0)
	0.0, // (169,0)
	0.0, // (170,0)
	0.0, // (171,0)
	0.0, // (172,0)
	0.0, // (173,0)
	0.0, // (174,0)
	0.0, // (175,0)
	0.0, // (176,0)
	0.0, // (177,0)
	0.0, // (178,0)
	0.0, // (179,0)
	0.0, // (180,0)
	0.0, // (181,0)
	0.0, // (182,0)
	0.0, // (183,0)
	0.0, // (184,0)
	0.0, // (185,0)
	0.0, // (186,0)
	0.0, // (187,0)
	0.0, // (188,0)
	0.0, // (189,0)
	0.0, // (190,0)
	0.0, // (191,0)
	0.0, // (192,0)
	0.0, // (193,0)
	0.0, // (194,0)
	0.0, // (195,0)
	0.0, // (196,0)
	0.0, // (197,0)
	0.0, // (198,0)
	0.0, // (199,0)
	0.0, // (200,0)
	0.0, // (201,0)
	0.0, // (202,0)
	0.0, // (203,0)
	0.0, // (204,0)
	0.0, // (205,0)
	0.0, // (206,0)
	0.0, // (207,0)
	0.0, // (208,0)
	0.0, // (209,0)
	0.0, // (210,0)
	0.0, // (211,0)
	0.0, // (212,0)
	0.0, // (213,0)
	0.0, // (214,0)
	0.0, // (215,0)
	0.0, // (216,0)
	0.0, // (217,0)
	0.0, // (218,0)
	0.0, // (219,0)
	0.0, // (220,0)
	0.0, // (221,0)
	0.0, // (222,0)
	0.0, // (223,0)
	0.0, // (224,0)
	0.0, // (225,0)
	0.0, // (226,0)
	0.0, // (227,0)
	0.0, // (228,0)
	0.0, // (229,0)
	0.0, // (230,0)
	0.0, // (231,0)
	0.0, // (232,0)
	0.0, // (233,0)
	0.0, // (234,0)
	0.0, // (235,0)
	0.0, // (236,0)
	0.0, // (237,0)
	0.0, // (238,0)
	0.0, // (239,0)
  },
  upper_constraint{
	10.0, // (0,0)
	1.475, // (1,0)
	1.475, // (2,0)
	0.0196, // (3,0)
	10.0, // (4,0)
	1.475, // (5,0)
	1.475, // (6,0)
	0.0196, // (7,0)
	10.0, // (8,0)
	1.475, // (9,0)
	1.475, // (10,0)
	0.0196, // (11,0)
	10.0, // (12,0)
	1.475, // (13,0)
	1.475, // (14,0)
	0.0196, // (15,0)
	10.0, // (16,0)
	1.475, // (17,0)
	1.475, // (18,0)
	0.0196, // (19,0)
	10.0, // (20,0)
	1.475, // (21,0)
	1.475, // (22,0)
	0.0196, // (23,0)
	10.0, // (24,0)
	1.475, // (25,0)
	1.475, // (26,0)
	0.0196, // (27,0)
	10.0, // (28,0)
	1.475, // (29,0)
	1.475, // (30,0)
	0.0196, // (31,0)
	10.0, // (32,0)
	1.475, // (33,0)
	1.475, // (34,0)
	0.0196, // (35,0)
	10.0, // (36,0)
	1.475, // (37,0)
	1.475, // (38,0)
	0.0196, // (39,0)
	1.5707963267948966, // (40,0)
	1.5707963267948966, // (41,0)
	1.5707963267948966, // (42,0)
	1.5707963267948966, // (43,0)
	1.5707963267948966, // (44,0)
	1.5707963267948966, // (45,0)
	1.5707963267948966, // (46,0)
	1.5707963267948966, // (47,0)
	1.5707963267948966, // (48,0)
	1.5707963267948966, // (49,0)
	1.5707963267948966, // (50,0)
	1.5707963267948966, // (51,0)
	1.5707963267948966, // (52,0)
	1.5707963267948966, // (53,0)
	1.5707963267948966, // (54,0)
	1.5707963267948966, // (55,0)
	1.5707963267948966, // (56,0)
	1.5707963267948966, // (57,0)
	1.5707963267948966, // (58,0)
	1.5707963267948966, // (59,0)
	2.0, // (60,0)
	2.0, // (61,0)
	2.0, // (62,0)
	2.0, // (63,0)
	2.0, // (64,0)
	2.0, // (65,0)
	2.0, // (66,0)
	2.0, // (67,0)
	2.0, // (68,0)
	2.0, // (69,0)
	2.0, // (70,0)
	2.0, // (71,0)
	2.0, // (72,0)
	2.0, // (73,0)
	2.0, // (74,0)
	2.0, // (75,0)
	2.0, // (76,0)
	2.0, // (77,0)
	2.0, // (78,0)
	2.0, // (79,0)
	2.0, // (80,0)
	2.0, // (81,0)
	2.0, // (82,0)
	2.0, // (83,0)
	2.0, // (84,0)
	2.0, // (85,0)
	2.0, // (86,0)
	2.0, // (87,0)
	2.0, // (88,0)
	2.0, // (89,0)
	9.42477796076938, // (90,0)
	9.42477796076938, // (91,0)
	9.42477796076938, // (92,0)
	9.42477796076938, // (93,0)
	9.42477796076938, // (94,0)
	9.42477796076938, // (95,0)
	9.42477796076938, // (96,0)
	9.42477796076938, // (97,0)
	9.42477796076938, // (98,0)
	9.42477796076938, // (99,0)
	9.42477796076938, // (100,0)
	9.42477796076938, // (101,0)
	9.42477796076938, // (102,0)
	9.42477796076938, // (103,0)
	9.42477796076938, // (104,0)
	9.42477796076938, // (105,0)
	9.42477796076938, // (106,0)
	9.42477796076938, // (107,0)
	9.42477796076938, // (108,0)
	9.42477796076938, // (109,0)
	9.42477796076938, // (110,0)
	9.42477796076938, // (111,0)
	9.42477796076938, // (112,0)
	9.42477796076938, // (113,0)
	9.42477796076938, // (114,0)
	9.42477796076938, // (115,0)
	9.42477796076938, // (116,0)
	9.42477796076938, // (117,0)
	9.42477796076938, // (118,0)
	9.42477796076938, // (119,0)
	0.0, // (120,0)
	0.0, // (121,0)
	0.0, // (122,0)
	0.0, // (123,0)
	0.0, // (124,0)
	0.0, // (125,0)
	0.0, // (126,0)
	0.0, // (127,0)
	0.0, // (128,0)
	0.0, // (129,0)
	0.0, // (130,0)
	0.0, // (131,0)
	0.0, // (132,0)
	0.0, // (133,0)
	0.0, // (134,0)
	0.0, // (135,0)
	0.0, // (136,0)
	0.0, // (137,0)
	0.0, // (138,0)
	0.0, // (139,0)
	0.0, // (140,0)
	0.0, // (141,0)
	0.0, // (142,0)
	0.0, // (143,0)
	0.0, // (144,0)
	0.0, // (145,0)
	0.0, // (146,0)
	0.0, // (147,0)
	0.0, // (148,0)
	0.0, // (149,0)
	0.0, // (150,0)
	0.0, // (151,0)
	0.0, // (152,0)
	0.0, // (153,0)
	0.0, // (154,0)
	0.0, // (155,0)
	0.0, // (156,0)
	0.0, // (157,0)
	0.0, // (158,0)
	0.0, // (159,0)
	0.0, // (160,0)
	0.0, // (161,0)
	0.0, // (162,0)
	0.0, // (163,0)
	0.0, // (164,0)
	0.0, // (165,0)
	0.0, // (166,0)
	0.0, // (167,0)
	0.0, // (168,0)
	0.0, // (169,0)
	0.0, // (170,0)
	0.0, // (171,0)
	0.0, // (172,0)
	0.0, // (173,0)
	0.0, // (174,0)
	0.0, // (175,0)
	0.0, // (176,0)
	0.0, // (177,0)
	0.0, // (178,0)
	0.0, // (179,0)
	0.0, // (180,0)
	0.0, // (181,0)
	0.0, // (182,0)
	0.0, // (183,0)
	0.0, // (184,0)
	0.0, // (185,0)
	0.0, // (186,0)
	0.0, // (187,0)
	0.0, // (188,0)
	0.0, // (189,0)
	0.0, // (190,0)
	0.0, // (191,0)
	0.0, // (192,0)
	0.0, // (193,0)
	0.0, // (194,0)
	0.0, // (195,0)
	0.0, // (196,0)
	0.0, // (197,0)
	0.0, // (198,0)
	0.0, // (199,0)
	0.0, // (200,0)
	0.0, // (201,0)
	0.0, // (202,0)
	0.0, // (203,0)
	0.0, // (204,0)
	0.0, // (205,0)
	0.0, // (206,0)
	0.0, // (207,0)
	0.0, // (208,0)
	0.0, // (209,0)
	0.0, // (210,0)
	0.0, // (211,0)
	0.0, // (212,0)
	0.0, // (213,0)
	0.0, // (214,0)
	0.0, // (215,0)
	0.0, // (216,0)
	0.0, // (217,0)
	0.0, // (218,0)
	0.0, // (219,0)
	0.0, // (220,0)
	0.0, // (221,0)
	0.0, // (222,0)
	0.0, // (223,0)
	0.0, // (224,0)
	0.0, // (225,0)
	0.0, // (226,0)
	0.0, // (227,0)
	0.0, // (228,0)
	0.0, // (229,0)
	0.0, // (230,0)
	0.0, // (231,0)
	0.0, // (232,0)
	0.0, // (233,0)
	0.0, // (234,0)
	0.0, // (235,0)
	0.0, // (236,0)
	0.0, // (237,0)
	0.0, // (238,0)
	0.0, // (239,0)
  }
{

  for (int i=0;i<160;i++) {
	  q_constraint[i]=0.0f;
  }

}

void MPC_Controller::run()
{

	/* **Part 1.** Retrieve current state dynamics and update l and u vectors with (linearised) dynamics (from A matrix)
	 * States 0:3 (the position in inertial frame) will come from inertial nav. States 3:6 (attitude) will come from the AHRS roll,pitch,yaw sensors
	 * Statest 6:9 (the translational velocities) will come from the inertial nav too. States 9:12 (body frame rates) will come from
	 * the gyros (do these need to be converted to earth frame rates??)
	 *
	 * **Part 2. Calculate and retrieve reference trajectories and update q matrix
	 * These should be constant for now at the desired location
	 *
	 * **Part 3.** Solve optimisation problem
	 *
	 * **Part 4.** Send next input to mixer. Log the results for the time being to see that control action is being produced
	 *
	 */

	// Part 1
	float state12[12];

	// Position & velocity values are in cm. Convert to m to match state dynamic equations used by MPC.
	Vector3f position = mcstate.inertial_nav.get_position();
	Vector3f velocity = mcstate.inertial_nav.get_velocity();

	state12[0] = position.x*1e-2;
	state12[1] = position.y*1e-2;
	state12[2] = position.z*1e-2;

	state12[6] = velocity.x*1e-2;
	state12[7] = velocity.y*1e-2;
	state12[8] = velocity.z*1e-2;

	// NOTE normally <roll,pitch,yaw>_sensor would be used to get angles as an int32_t in deg*100 but can use <roll,pitch,yaw> angles directly here
	
	state12[3] = mcstate.ahrs.roll;
	state12[4] = mcstate.ahrs.pitch;
	state12[5] = mcstate.ahrs.yaw;

	// Gyro rates are already in rad/s
	Vector3f ang_rates = mincopter.ins.get_gyro();
	state12[9] = ang_rates.x;
	state12[10] = ang_rates.y;
	state12[11] = ang_rates.z;
	
	// Update L and U constraint matrices with system dynamics
	for (int i=0;i<12;i++) {
		lower_constraint[120+i] = 0.0f;
		for (int j=0;j<12;j++) {
			/* Here, we are reusing the original l and u matrices so as to not remove the other constraints.
			* Our state dynamic constraints start at index 120 */
			lower_constraint[120+i] += linearised_A[i*12+j]*state12[j];
		}
		upper_constraint[120+i] = lower_constraint[120+i];
	}

	// Part 2.

	// Update Q matrix with reference trajectory
	for (int i=0;i<10;i++) {
		for (int j=0;j<12;j++) {
			// TODO This equation assumes an identity P matrix for the MPC problem. The correct formulation is q = -1*x_ref^{T}@P
			q_constraint[i*12+j] = -1*state_reference[i*12+j];
		}
	}

	osqp_update_data_vec(&solver, q_constraint, lower_constraint, upper_constraint);

	// Part 3.
	
	// Solve MPC problem
	exitflag = osqp_solve(&solver);

	// Part 4.
	
	// Update control vector TODO This is a vector now but should soon call a method to update the mixer values.
	float control_vector[4];
	for (int i=0;i<4;i++) {
		control_vector[i] = solver.solution->x[120+i];
	}

#ifdef TARGET_ARCH_LINUX
	static uint32_t iter=0;
	if (iter%100==0) {
		std::cout << "MPC Control Output: " << control_vector[0] << " " << control_vector[1] << " " << control_vector[2] << " " << control_vector[3] << "\n";
		iter=0;
	}
	iter++;
#endif
	
	// TODO For now, use a mixer function embedded into the MPC to convert to a PWM signal but later move mixer to own class
	
	mixer_generate_pwm(control_vector[0], control_vector[1], control_vector[2], control_vector[3]);

}

void MPC_Controller::mixer_generate_pwm(float thrust, float roll, float pitch, float yaw)
{
	// Generate allocation for each motor
	// Conversion from motor force to velocity (using quadratic model)
	// Call the GZ_interface directly to update (don't use AP_Motors)

	float allocation[4];
	float rotor_speed[4]; // rad/s

	// TODO To be updated
	allocation[0] = 1*thrust + -1*roll + 1*pitch + 1*yaw;
	allocation[1] = 1*thrust + 1*roll + -1*pitch + 1*yaw;
	allocation[2] = 1*thrust + -1*roll + -1*pitch + -1*yaw;
	allocation[3] = 1*thrust + 1*roll + 1*pitch + -1*yaw;


	/* Using standard model quadratic model for rotor thrust: F = k_{t}\omega^{2}
	 *
	 * \omega = sqrt(F/k_{t})
	 *
	 */

	float kt = 1.5e-6;

	for (int i=0;i<4;i++) {
		allocation[i] = ap_max(0.0f, allocation[i]);
		rotor_speed[i] = sqrt(allocation[i]/kt);
	}

	/* Scaling
	 *
	 * Simulated motors have a PWM range of [1100,1900]
	 *
	 * Max rotor_speed is 838 RPM ~= 87.7 rad/s
	 *
	 */

	uint32_t pwm[4];

	for (int i=0;i<4;i++) pwm[i] = ap_min(1100 + uint32_t((rotor_speed[i]/87.7f)*800), 1900);

#ifdef TARGET_ARCH_LINUX
	simlog.write_mpc_control_output(thrust, roll, pitch, yaw);

	// Assign control to signal
	for (int i=0;i<4;i++) gz_interface.control_pwm[i] = pwm[i];

	static uint32_t iter2=0;
	if (iter2%100==0) {
		std::cout << "RS: " << rotor_speed[0] << " " << rotor_speed[1] << " " << rotor_speed[2] << " " << rotor_speed[3] << "\n";
		std::cout << "PWM: " << pwm[0] << "  " << pwm[1] << " " << pwm[2] << " " << pwm[3] << "\n";
		iter2=0;
	}
	iter2++;
#endif

}




